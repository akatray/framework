// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./Types.hpp"
#include <iostream>
#include <chrono>
#include <map>
#include <utility>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework: Everything time related.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx::time
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get time passed since the beginning of time. In milliseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto getTimeMs ( void ) -> u64
	{
		return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get time passed since the beginning of time. In microseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto getTimeUs ( void ) -> u64
	{
		return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Clock for measuring performance. Time is in milliseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class PerfClock
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		str Name;
		str LastEvent;
		u64 LastTime;
		u64 TotalTime;
		std::map<str, u64> Events;
		public:
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( void ) : Name("PerfClock"), LastEvent(), LastTime(0), TotalTime(0), Events() {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: Constructs named clock.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( const str _Name ) : Name(_Name), LastEvent(), LastTime(0), TotalTime(0), Events() {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: Constructs named clock and starts event.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( const str _Name, const str _Event ) : Name(_Name), LastEvent(), LastTime(0), TotalTime(0), Events() { this->begin(_Event); }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get event's time.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto event ( const str _Event ) -> u64 { return this->Events[_Event]; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Time last event and start new one.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto begin ( const str _Event ) -> void
		{
			auto Time = std::chrono::high_resolution_clock::now().time_since_epoch();
			auto TimeInMs = std::chrono::duration_cast<std::chrono::milliseconds>(Time).count();
			
			if(this->LastTime == 0)
			{
				this->LastEvent = _Event;
				this->LastTime = TimeInMs;
			}

			else
			{
				this->Events[this->LastEvent] = TimeInMs - this->LastTime;
				this->TotalTime += TimeInMs - this->LastTime;
				this->LastEvent = _Event;
				this->LastTime = TimeInMs;
			}
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Time last event.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto finish ( void ) -> void { this->begin("finish"); }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Reset clock's state.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto reset ( void ) -> void
		{
			this->LastEvent = str();
			this->LastTime = 0;
			this->TotalTime = 0;
			this->Events.clear();
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Output results to console.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto print ( void ) const -> void
		{
			std::cout << "------------------------------------------------------------\n";
			std::cout << this->Name << " results:\n";

			for(auto& Event : this->Events) std::cout << "  " << Event.first << ": " << Event.second << "ms.\n";
			
			std::cout << "\nTotal time: " << this->TotalTime << "ms.\n";
			std::cout << "------------------------------------------------------------\n";
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Average performance clocks.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		static auto average ( const std::vector<PerfClock>& _Clocks ) -> PerfClock
		{
			auto AvgClock = PerfClock(_Clocks[0].Name);
		
			for(auto& Event : _Clocks[0].Events)
			{
				auto TotalEventTime = u64(0);
				
				for(auto c = u64(0); c < _Clocks.size(); ++c)
				{
					if(_Clocks[0].Name != _Clocks[c].Name) throw str("Error: fx->time->PerClock->average()"); // Vector needs to contain same clock from different iterations.
					TotalEventTime += _Clocks[c].Events.find(Event.first)->second;
				}

				TotalEventTime /= _Clocks.size();

				AvgClock.Events[Event.first] = TotalEventTime;
			}

			return AvgClock;
		}
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Clock for launching cyclic events. Time is in milliseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class CyclicClock
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		u64 LastTime;
		u64 Cycle;
		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		CyclicClock ( void ) = delete;

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		CyclicClock ( const u64 _Cycle ) : LastTime(getTimeMs()), Cycle(_Cycle) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Return true if its time for the event. Resets if true, was returned.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto isReady ( void ) -> bool
		{
			if((getTimeMs() - this->LastTime) >= this->Cycle)
			{
				this->LastTime = getTimeMs();
				return true;
			}

			else return false;
		}
	};
}
