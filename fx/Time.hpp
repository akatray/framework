// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./Types.hpp"
#include <iostream>
#include <chrono>
#include <map>
#include <utility>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework: Everything time related.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx::time
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get time passed since the beginning of time. In milliseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto getTimeMs ( void ) -> uMAX
	{
		return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get time passed since the beginning of time. In microseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto getTimeUs ( void ) -> uMAX
	{
		return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Clock for measuring performance.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class PerfClock
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		str Name;
		str LastEvent;
		std::chrono::nanoseconds LastTime;
		std::chrono::nanoseconds TotalTime;
		std::map<str, std::chrono::nanoseconds> Events;
		public:
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( void ) : Name("PerfClock"), LastEvent(), LastTime(0), TotalTime(0), Events() {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: Constructs named clock.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( const str& _Name ) : Name(_Name), LastEvent(), LastTime(0), TotalTime(0), Events() {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: Constructs named clock and starts event.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( const str& _Name, const str& _Event ) : Name(_Name), LastEvent(), LastTime(0), TotalTime(0), Events() { this->begin(_Event); }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get event's time.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto timeNs ( const str& _Event ) -> uMAX { return this->Events[_Event].count(); }
		auto timeUs ( const str& _Event ) -> uMAX { return std::chrono::duration_cast<std::chrono::microseconds>(this->Events[_Event]).count(); }
		auto timeMs ( const str& _Event ) -> uMAX { return std::chrono::duration_cast<std::chrono::milliseconds>(this->Events[_Event]).count(); }
		auto timeSc ( const str& _Event ) -> uMAX { return std::chrono::duration_cast<std::chrono::seconds>(this->Events[_Event]).count(); }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Time last event and start new one.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto begin ( const str& _Event ) -> void
		{
			auto CurTime = std::chrono::high_resolution_clock::now().time_since_epoch();
			
			if(this->LastTime == std::chrono::nanoseconds(0))
			{
				this->LastEvent = _Event;
				this->LastTime = CurTime;
			}

			else
			{
				this->Events[this->LastEvent] = CurTime - this->LastTime;
				this->TotalTime += CurTime - this->LastTime;
				this->LastEvent = _Event;
				this->LastTime = CurTime;
			}
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Time last event.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto finish ( void ) { this->begin("finish"); }
	};

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Clock for launching cyclic events. Time is in milliseconds.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class CyclicClock
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Members.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		uMAX LastTime;
		uMAX Cycle;
		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		CyclicClock ( void ) = delete;

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		CyclicClock ( const uMAX _Cycle ) : LastTime(getTimeMs()), Cycle(_Cycle) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Return true if its time for the event. Resets if true, was returned.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto isReady ( void )
		{
			if((getTimeMs() - this->LastTime) >= this->Cycle)
			{
				this->LastTime = getTimeMs();
				return true;
			}

			else return false;
		}
	};
}
