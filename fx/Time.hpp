// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "./Types.hpp"
#include <iostream>
#include <chrono>
#include <vector>
#include <utility>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework - Tired of chrono boilerplates.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx::time
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Clock for measuring performance.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class PerfClock
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Data.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		std::vector<std::pair<str, u64>> Results;
		str LastEvent;
		u64 LastTime;
		u64 TotalTime;
		public:
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		PerfClock ( void )
		{
			this->reset();
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Time last event, add it to results and start new event.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto begin ( const str _Event ) -> void
		{
			auto Time = std::chrono::high_resolution_clock::now().time_since_epoch();
			auto TimeInMs = std::chrono::duration_cast<std::chrono::milliseconds>(Time).count();
			
			if(this->LastTime == 0)
			{
				this->LastEvent = _Event;
				this->LastTime = TimeInMs;
			}

			else
			{
				this->Results.push_back(std::make_pair(this->LastEvent, TimeInMs - this->LastTime));
				this->TotalTime += TimeInMs - this->LastTime;
				this->LastEvent = _Event;
				this->LastTime = TimeInMs;
			}
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		//
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto finish ( void ) -> void
		{
			this->begin("finish");
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Reset clock's state.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto reset ( void ) -> void
		{
			this->LastTime = 0;
			this->TotalTime = 0;
			this->Results.clear();
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Print results to standard stream.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		auto print ( void ) const -> void
		{
			std::cout << "--------------------------------------------------\n";

			for(auto& Event : this->Results)
			{
				std::cout << Event.first << ": " << Event.second << "ms.\n";
			}

			std::cout << "Total time: " << this->TotalTime << "ms.\n";
			std::cout << "--------------------------------------------------\n";
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Average performance clocks results.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		static auto average (const std::vector<PerfClock>& _Clocks) -> PerfClock
		{
			auto AvgClock = PerfClock();
		
			for(auto e = u64(0); e < _Clocks[0].Results.size(); ++e)
			{
				u64 TotalEventTime = 0;
				for(auto c = u64(0); c < _Clocks.size(); ++c) TotalEventTime += _Clocks[c].Results[e].second;
				TotalEventTime /= _Clocks.size();
				AvgClock.Results.push_back(std::make_pair(_Clocks[0].Results[e].first, TotalEventTime));
				AvgClock.TotalTime += TotalEventTime;
			}

			return AvgClock;
		}
	};



}