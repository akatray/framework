// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Types.hpp"
#include <cmath>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework - Blackmagic.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx::math
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Constants.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr auto E = r32(2.71828f);
	constexpr auto PI = r32(3.14159f);

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get index into 1D array from 2D coordinates.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto index ( const u64 _X, const u64 _Y, const u64 _MaxY) -> u64 { return _Y + _MaxY * _X; }

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get index into 1D array from 3D coordinates.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto index ( const u64 _X, const u64 _Y, const u64 _Z, const u64 _MaxY, const u64 _MaxZ ) -> u64
	{
		return _Z + _MaxZ * (_Y + _MaxY * _X);
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get index into 1D array from 4D coordinates.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto index ( const u64 _X, const u64 _Y, const u64 _Z, const u64 _W, const u64 _MaxY, const u64 _MaxZ, const u64 _MaxW ) -> u64
	{
		return _W + _MaxW * (_Z + _MaxZ * (_Y + _MaxY * _X));
	}



	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Mean Squared Error: One item.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T> inline auto mse ( const T _Real, const T _Ideal ) -> T { return std::pow(_Real - _Ideal, 2); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Mean Squared Error: Many items.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T> inline auto mse (const u64 _Size, const T* _Real, const T* _Ideal) -> T
	{
		auto Sum = T(0);

		for(auto n = u64(0); n < _Size; ++n) Sum += std::pow(_Real[n] - _Ideal[n], 2);

		return Sum / _Size;
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Logistic function.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	inline auto sigmoid ( const r32 _X ) -> r32 { return (1.0f / (1.0f + std::powf(E, -_X))); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Logistic function's derivative. Proper version.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	inline auto sigmoidDer ( const r32 _X ) -> r32 { return (sigmoid(_X) * (1.0f - sigmoid(_X))); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Logistic function's derivative. Version when logistic function was already applied.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto sigmoidDer2 ( const r32 _FX ) -> r32 { return (_FX * (1.0f - _FX)); }

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TanH function.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	inline auto tanh ( const r32 _X ) -> r32 { return (2.0f / (1.0f + std::powf(E, -_X * 2.0f))) - 1.0f; }

	// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// TanH function's derivative. Version when TanH function was already applied.
	// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	inline auto tanhDer2 ( const r32 _FX ) -> r32 { return 1.0f - std::powf(_FX, 2.0f); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// REctified Linear Unit function.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto relu ( const r32 _X ) -> r32 { if(_X >= 0.0f) return _X; else return 0.0f; }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// REctified Linear Unit function's derivative.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto reluDer ( const r32 _X ) -> r32 { if(_X >= 0.0f) return 1.0f; else return 0.0f; }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Parametric REctified Linear Unit function.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto prelu (const r32 _X, const r32 _A = 0.01f ) -> r32 { if(_X >= 0.0f) return _X; else return _X * _A; }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Parametric REctified Linear Unit function's derivative.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto preluDer (const r32 _X, const r32 _A = 0.01f) -> r32 { if(_X >= 0.0f) return 1.0f; else return _A; }



}