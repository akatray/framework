// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Types.hpp"
#include <cmath>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework - Blackmagic.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx::math
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Constants.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr auto E = r32(2.71828f);
	constexpr auto PI = r32(3.14159f);

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get index into 1D array from 2D coordinates.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto index ( const u64 _X, const u64 _Y, const u64 _MaxY) -> u64 { return _Y + _MaxY * _X; }

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get index into 1D array from 3D coordinates.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto index ( const u64 _X, const u64 _Y, const u64 _Z, const u64 _MaxY, const u64 _MaxZ ) -> u64
	{
		return _Z + _MaxZ * (_Y + _MaxY * _X);
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get index into 1D array from 4D coordinates.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto index ( const u64 _X, const u64 _Y, const u64 _Z, const u64 _W, const u64 _MaxY, const u64 _MaxZ, const u64 _MaxW ) -> u64
	{
		return _W + _MaxW * (_Z + _MaxZ * (_Y + _MaxY * _X));
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Multidimensional object's shape.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	class Shape
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Data.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		static const u64 MAX_DIMENSIONS = 4;
		u64 Count;
		u64 Dimensions[MAX_DIMENSIONS];
		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr Shape ( void ) : Count(0), Dimensions{1, 1, 1, 1} {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: 1D.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr Shape ( const u64 _X ) : Count(1), Dimensions{_X, 1, 1, 1} {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: 2D.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr Shape ( const u64 _X, const u64 _Y ) : Count(2), Dimensions{_X, _Y, 1, 1} {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: 3D.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr Shape ( const u64 _X, const u64 _Y, const u64 _Z ) : Count(3), Dimensions{_X, _Y, _Z, 1} {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: 4D.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr Shape ( const u64 _X, const u64 _Y, const u64 _Z, const u64 _W ) : Count(4), Dimensions{_X, _Y, _Z, _W} {}
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get dimension lenght.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr inline auto operator[] ( const u64 _Index ) const -> u64 { return Dimensions[_Index]; }

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get object's space size.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr inline auto size ( void ) const -> u64
		{
			auto UnitsCount = u64(1);
			
			for(auto u = u64(0); u < MAX_DIMENSIONS; ++u) UnitsCount *= this->Dimensions[u];

			return UnitsCount;
		}

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get index into 1D array from 2D coordinates.
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr inline auto idx ( const u64 _X, const u64 _Y ) const -> u64 { return index(_X, _Y, this->Dimensions[1]); }

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get index into 1D array from 3D coordinates.
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr inline auto idx ( const u64 _X, const u64 _Y, const u64 _Z ) const -> u64 { return index(_X, _Y, _Z, this->Dimensions[1], this->Dimensions[2]); }

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get index into 1D array from 4D coordinates.
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		constexpr inline auto idx ( const u64 _X, const u64 _Y, const u64 _Z, const u64 _W ) const -> u64
		{
			return index(_X, _Y, _Z, _W, this->Dimensions[1], this->Dimensions[2], this->Dimensions[3]);
		}
	};

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Mean Squared Error: One item.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T> inline auto mse ( const T _Real, const T _Ideal ) -> T { return std::pow(_Real - _Ideal, 2); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Mean Squared Error: Many items.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<class T> inline auto mse (const u64 _Size, const T* _Real, const T* _Ideal) -> T
	{
		auto Sum = T(0);

		for(auto n = u64(0); n < _Size; ++n) Sum += std::pow(_Real[n] - _Ideal[n], 2);

		return Sum / _Size;
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Logistic function.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	inline auto sigmoid ( const r32 _X ) -> r32 { return (1.0f / (1.0f + std::powf(E, -_X))); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Logistic function's derivative. Proper version.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	inline auto sigmoidDer ( const r32 _X ) -> r32 { return (sigmoid(_X) * (1.0f - sigmoid(_X))); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Logistic function's derivative. Version when logistic function was already applied.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto sigmoidDer2 ( const r32 _FX ) -> r32 { return (_FX * (1.0f - _FX)); }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// REctified Linear Unit function.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto relu ( const r32 _X ) -> r32 { if(_X >= 0.0f) return _X; else return _X; }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// REctified Linear Unit function's derivative.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto reluDer ( const r32 _X ) -> r32 { if(_X >= 0.0f) return 1.0f; else return 0.0f; }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Parametric REctified Linear Unit function.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto prelu (const r32 _X, const r32 _A = 0.01f ) -> r32 { if(_X >= 0.0f) return _X; else return _X * _A; }

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Parametric REctified Linear Unit function's derivative.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	constexpr inline auto preluDer (const r32 _X, const r32 _A = 0.01f) -> r32 { if(_X >= 0.0f) return 1.0f; else return _A; }
}