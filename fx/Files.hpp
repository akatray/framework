// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Types.hpp"
#include "Error.hpp"
#include <vector>
#include <filesystem>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx::files
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Collect all files in directory. Optionaly do same for subdirectories.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto buildFileList ( const str& _Dir, const bool _Recursive = false ) -> std::vector<std::filesystem::path>
	{
		std::vector<std::filesystem::path> Files;

		try
		{
			if(_Recursive)
			{
				for(auto& Entry : std::filesystem::recursive_directory_iterator(_Dir))
				{
					if(Entry.is_regular_file())	Files.push_back(Entry.path());
				}
			}

			else
			{
				for(auto& Entry : std::filesystem::directory_iterator(_Dir))
				{
					if(Entry.is_regular_file())	Files.push_back(Entry.path());
				}
			}
		}

		catch (const std::exception& e)
		{
			throw Error("fx::files", "", "buildFileList", 0, e.what());
		}

		catch (...)
		{
			throw Error("fx::files", "", "buildFileList", 0, "Unknown exception!");
		}

		return Files;
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get file name from string. (Name.Extension).
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto getName ( const str& _Filepath ) -> str
	{
		for(auto c = i64(_Filepath.size()-1); c > 0; --c) if(_Filepath[c] == '.') return _Filepath.substr(0, c);
		return str();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Get file extension from string. (Name.Extension).
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto getExtension ( const str& _Filepath ) -> str
	{
		for(auto c = i64(_Filepath.size()-1); c > 0; --c) if(_Filepath[c] == '.') return _Filepath.substr(c+1);
		return str();
	}
}
