// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Pragma.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Types.hpp"
#include "Allocator.hpp"
#include <cstring>

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Framework.
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace fx
{
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// For people that forgets to call delete.
	// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T> class Buffer
	{
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Data.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		T* Data;
		u64 Size;
		Allocator* Alloc;
		public:

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Default constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer ( void ) : Data(nullptr), Size(0), Alloc(&AllocDef) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor: Non default allocator.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer ( Allocator& _Alloc ) : Data(nullptr), Size(0), Alloc(&_Alloc) {}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Explicit constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer ( const u64 _Size, Allocator& _Alloc = AllocDef ) : Data(nullptr), Size(_Size), Alloc(&_Alloc)
		{
			this->resize(_Size);
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Copy constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer ( const Buffer<T>& _Buffer ) : Data(nullptr), Size(0), Alloc(_Buffer.Alloc)
		{
			this->resize(_Buffer.Size);
			std::memcpy(this->Data, _Buffer.Data, this->sizeInBytes());
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Move constructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer ( Buffer<T>&& _Buffer ) : Data(_Buffer.Data), Size(_Buffer.Size), Alloc(_Buffer.Alloc)
		{
			_Buffer.Data = nullptr;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Destructor.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		~Buffer ( void )
		{
			this->free();
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Copy assignment.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer<T>& operator= ( const Buffer<T>& _Buffer )
		{
			if(this != &_Buffer)
			{
				this->free(); // Free memory with old allocator before it is overwriten.

				this->Alloc = _Buffer.Alloc;

				this->resize(_Buffer.Size);
				
				std::memcpy(this->Data, _Buffer.Data, this->sizeInBytes());
			}

			return *this;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Move assignment.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Buffer<T>& operator= ( Buffer<T>&& _Buffer )
		{
			if(this != &_Buffer)
			{
				this->free(); // Free memory with old allocator before it is overwriten.
				
				this->Data = _Buffer.Data;
				this->Size = _Buffer.Size;
				this->Alloc = _Buffer.Alloc;

				_Buffer.Data = nullptr;
			}

			return *this;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Direct buffer access.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline constexpr auto operator[] ( const u64 _Index ) -> T&
		{
			return this->Data[_Index];
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get buffer pointer.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline constexpr auto operator() ( void ) const -> T*
		{
			return this->Data;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get casted buffer pointer to save few letter.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		template<typename C> inline constexpr auto cast ( void ) const -> C*
		{
			return reinterpret_cast<C*>(this->Data);
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get allocator.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline constexpr auto allocator ( void ) const -> Allocator&
		{
			return *this->Alloc;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get buffer size in units.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline constexpr auto size ( void ) const -> u64
		{
			return this->Size;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Get buffer size in bytes.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline constexpr auto sizeInBytes ( void ) const -> u64
		{
			return sizeof(T) * this->Size;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Zero memory.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline auto clear ( void ) -> void
		{
			std::memset(this->Data, 0, sizeof(T) * this->Size);
		}
		
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Free buffer.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline auto free ( void ) -> void
		{
			if(this->Data) this->Alloc->free(this->Data);
			this->Data = nullptr;
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		// Delete old buffer and allocate new one.
		// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		inline auto resize ( const u64 _Size ) -> void
		{
			this->free();
			this->Size = _Size;
			this->Data = reinterpret_cast<T*>(this->Alloc->alloc(sizeof(T) * this->Size));
		}
	};
}

